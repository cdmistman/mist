// TODO: block comments
COMMENT = { "//" ~ (!whitespace_eol ~ ANY) ~ whitespace_eol }

WHITESPACE = { " " | "\t" | whitespace_eol }
whitespace_eol = { "\n" | "\r\n" }

b_curly_l = { "{" }
b_curly_r = { "}" }
b_paren_l = { "(" }
b_paren_r = { ")" }
b_square_l = { "[" }
b_square_r = { "]" }

block = { b_curly_l ~ statements? ~ b_curly_r }

call = { expression_list }

expression_group = { b_paren_l ~ (invoke | expression_with_block)? ~ b_paren_r }
expression_list = { (expression_group | identifier | literal)+ }
expression_with_block = { block | if_expression }

identifier = @{ !kw ~ "_"* ~ XID_START ~ XID_CONTINUE* }

if_expression = { kw_if ~ (call | expression_with_block) ~ block ~ (kw_else ~ else_clause)? }
else_clause = {
	| if_expression
	| block
}

invoke = { expression_list ~ block? }

kw = _{ kw_else | kw_false | kw_if | kw_let | kw_true }
kw_else = { "else" }
kw_false = { "false" }
kw_if = { "if" }
kw_let = { "let" }
kw_true = { "true" }

literal = { kw_false | kw_true | literal_integer }
literal_integer = { ASCII_DIGIT ~ (ASCII_DIGIT | "_")* }

statements = {
	| (call ~ block ~ (sym_semicolon? ~ statements)?)
	| (call ~ (sym_semicolon ~ statements)?)
	| (expression_with_block ~ sym_semicolon?  ~ statements?)
}

sym_semicolon = { ";" }
