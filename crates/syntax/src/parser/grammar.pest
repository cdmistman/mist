// TODO: block comments
COMMENT = { "//" ~ (!whitespace_eol ~ ANY) ~ whitespace_eol }

WHITESPACE = { " " | "\t" | whitespace_eol }
whitespace_eol = { "\n" | "\r\n" }

b_curly_l = { "{" }
b_curly_r = { "}" }
b_paren_l = { "(" }
b_paren_r = { ")" }
b_square_l = { "[" }
b_square_r = { "]" }

block = { b_curly_l ~ statements? ~ b_curly_r }
binding = { identifier ~ (sym_colon ~ type_ref)? }

call = { expression_list }

expression_group = { b_paren_l ~ (invoke | expression_with_block)? ~ b_paren_r }
expression_list = { (expression_group | identifier | literal)+ }
expression_with_block = { block | if_expression }

fn_def = { kw_fn ~ identifier ~ fn_param_list ~ fn_return_type? ~ block }
fn_param_list = {
	b_paren_l
	// TODO: trailing comma
	~ (binding ~ (sym_comma ~ binding)*)?
	~ b_paren_r
}
fn_return_type = { sym_arrow ~ type_ref }

identifier = @{ !kw ~ "_"* ~ XID_START ~ XID_CONTINUE* }

if_expression = { kw_if ~ (call | expression_with_block) ~ block ~ (kw_else ~ else_clause)? }
else_clause = {
	| if_expression
	| block
}

invoke = { expression_list ~ block? }

item = {
	| fn_def
}

kw = _{ kw_else | kw_false | kw_fn | kw_if | kw_let | kw_true }
kw_else = { "else" }
kw_false = { "false" }
kw_fn = { "fn" }
kw_if = { "if" }
kw_let = { "let" }
kw_true = { "true" }

literal = { kw_false | kw_true | literal_integer }
literal_integer = { ASCII_DIGIT ~ (ASCII_DIGIT | "_")* }

module = { SOI ~ item* ~ EOI}

statements = {
	statement_let
	| statement_expression
}
statement_expression = {
	(call
	~ (
		(block ~ (sym_semicolon? ~ statements)?)
		| (sym_semicolon ~ statements)
	)?)
	| (expression_with_block ~ sym_semicolon? ~ statements?)
}
statement_let = {
	kw_let
	~ binding
	~ (
		sym_semicolon
		| statement_expression
	)
}

sym_arrow = { "->" }
sym_colon = { ":" }
sym_comma = { "," }
sym_eq = { "=" }
sym_semicolon = { ";" }

type_ref_group = { b_paren_l ~ type_ref? ~ b_paren_r }
type_ref = { identifier | type_ref_group }
